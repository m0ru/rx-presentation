{
  "name": "reveal.js",
  "version": "3.1.0",
  "description": "The HTML Presentation Framework",
  "homepage": "http://lab.hakim.se/reveal-js",
  "subdomain": "revealjs",
  "main": "js/reveal.js",
  "scripts": {
    "test": "grunt test",
    "start": "grunt serve"
  },
  "author": {
    "name": "Hakim El Hattab",
    "email": "hakim.elhattab@gmail.com",
    "url": "http://hakim.se"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hakimel/reveal.js.git"
  },
  "engines": {
    "node": "~0.10.0"
  },
  "dependencies": {
    "underscore": "~1.5.1",
    "express": "~2.5.9",
    "mustache": "~0.7.2",
    "socket.io": "~0.9.16"
  },
  "devDependencies": {
    "grunt-contrib-qunit": "~0.5.2",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-cssmin": "~0.12.2",
    "grunt-contrib-uglify": "~0.2.4",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-sass": "~0.14.0",
    "grunt-contrib-connect": "~0.8.0",
    "grunt-autoprefixer": "~1.0.1",
    "grunt-zip": "~0.7.0",
    "grunt": "~0.4.0",
    "node-sass": "~0.9.3"
  },
  "license": "MIT",
  "gitHead": "0c971b06e4f14a6093c8dcb5feb6b704f3906b99",
  "readme": "# reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js)\r\n\r\nA framework for easily creating beautiful presentations using HTML. [Check out the live demo](http://lab.hakim.se/reveal-js/).\r\n\r\nreveal.js comes with a broad range of features including [nested slides](https://github.com/hakimel/reveal.js#markup), [Markdown contents](https://github.com/hakimel/reveal.js#markdown), [PDF export](https://github.com/hakimel/reveal.js#pdf-export), [speaker notes](https://github.com/hakimel/reveal.js#speaker-notes) and a [JavaScript API](https://github.com/hakimel/reveal.js#api). It's best viewed in a modern browser but [fallbacks](https://github.com/hakimel/reveal.js/wiki/Browser-Support) are available to make sure your presentation can still be viewed elsewhere.\r\n\r\n\r\n#### More reading:\r\n- [Installation](#installation): Step-by-step instructions for getting reveal.js running on your computer.\r\n- [Changelog](https://github.com/hakimel/reveal.js/releases): Up-to-date version history.\r\n- [Examples](https://github.com/hakimel/reveal.js/wiki/Example-Presentations): Presentations created with reveal.js, add your own!\r\n- [Browser Support](https://github.com/hakimel/reveal.js/wiki/Browser-Support): Explanation of browser support and fallbacks.\r\n- [Plugins](https://github.com/hakimel/reveal.js/wiki/Plugins,-Tools-and-Hardware): A list of plugins that can be used to extend reveal.js.\r\n\r\n## Online Editor\r\n\r\nPresentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at [http://slides.com](http://slides.com).\r\n\r\n\r\n## Instructions\r\n\r\n### Markup\r\n\r\nMarkup hierarchy needs to be ``<div class=\"reveal\"> <div class=\"slides\"> <section>`` where the ``<section>`` represents one slide and can be repeated indefinitely. If you place multiple ``<section>``'s inside of another ``<section>`` they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example:\r\n\r\n```html\r\n<div class=\"reveal\">\r\n\t<div class=\"slides\">\r\n\t\t<section>Single Horizontal Slide</section>\r\n\t\t<section>\r\n\t\t\t<section>Vertical Slide 1</section>\r\n\t\t\t<section>Vertical Slide 2</section>\r\n\t\t</section>\r\n\t</div>\r\n</div>\r\n```\r\n\r\n### Markdown\r\n\r\nIt's possible to write your slides using Markdown. To enable Markdown, add the ```data-markdown``` attribute to your ```<section>``` elements and wrap the contents in a ```<script type=\"text/template\">``` like the example below.\r\n\r\nThis is based on [data-markdown](https://gist.github.com/1343518) from [Paul Irish](https://github.com/paulirish) modified to use [marked](https://github.com/chjj/marked) to support [Github Flavoured Markdown](https://help.github.com/articles/github-flavored-markdown). Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks).\r\n\r\n```html\r\n<section data-markdown>\r\n\t<script type=\"text/template\">\r\n\t\t## Page title\r\n\r\n\t\tA paragraph with some text and a [link](http://hakim.se).\r\n\t</script>\r\n</section>\r\n```\r\n\r\n#### External Markdown\r\n\r\nYou can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The ```data-charset``` attribute is optional and specifies which charset to use when loading the external file.\r\n\r\nWhen used locally, this feature requires that reveal.js [runs from a local web server](#full-setup).\r\n\r\n```html\r\n<section data-markdown=\"example.md\"  \r\n         data-separator=\"^\\n\\n\\n\"  \r\n         data-separator-vertical=\"^\\n\\n\"  \r\n         data-separator-notes=\"^Note:\"  \r\n         data-charset=\"iso-8859-15\">\r\n</section>\r\n```\r\n\r\n#### Element Attributes\r\n\r\nSpecial syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things.\r\n\r\n```html\r\n<section data-markdown>\r\n\t<script type=\"text/template\">\r\n\t\t- Item 1 <!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\r\n\t\t- Item 2 <!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\r\n\t</script>\r\n</section>\r\n```\r\n\r\n#### Slide Attributes\r\n\r\nSpecial syntax (in html comment) is available for adding attributes to the slide `<section>` elements generated by your Markdown.\r\n\r\n```html\r\n<section data-markdown>\r\n\t<script type=\"text/template\">\r\n\t<!-- .slide: data-background=\"#ff0000\" -->\r\n\t\tMarkdown content\r\n\t</script>\r\n</section>\r\n```\r\n\r\n\r\n### Configuration\r\n\r\nAt the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below.\r\n\r\n```javascript\r\nReveal.initialize({\r\n\r\n\t// Display controls in the bottom right corner\r\n\tcontrols: true,\r\n\r\n\t// Display a presentation progress bar\r\n\tprogress: true,\r\n\r\n\t// Display the page number of the current slide\r\n\tslideNumber: false,\r\n\r\n\t// Push each slide change to the browser history\r\n\thistory: false,\r\n\r\n\t// Enable keyboard shortcuts for navigation\r\n\tkeyboard: true,\r\n\r\n\t// Enable the slide overview mode\r\n\toverview: true,\r\n\r\n\t// Vertical centering of slides\r\n\tcenter: true,\r\n\r\n\t// Enables touch navigation on devices with touch input\r\n\ttouch: true,\r\n\r\n\t// Loop the presentation\r\n\tloop: false,\r\n\r\n\t// Change the presentation direction to be RTL\r\n\trtl: false,\r\n\r\n\t// Turns fragments on and off globally\r\n\tfragments: true,\r\n\r\n\t// Flags if the presentation is running in an embedded mode,\r\n\t// i.e. contained within a limited portion of the screen\r\n\tembedded: false,\r\n\r\n\t// Flags if we should show a help overlay when the questionmark\r\n\t// key is pressed\r\n\thelp: true,\r\n\r\n\t// Number of milliseconds between automatically proceeding to the\r\n\t// next slide, disabled when set to 0, this value can be overwritten\r\n\t// by using a data-autoslide attribute on your slides\r\n\tautoSlide: 0,\r\n\r\n\t// Stop auto-sliding after user input\r\n\tautoSlideStoppable: true,\r\n\r\n\t// Enable slide navigation via mouse wheel\r\n\tmouseWheel: false,\r\n\r\n\t// Hides the address bar on mobile devices\r\n\thideAddressBar: true,\r\n\r\n\t// Opens links in an iframe preview overlay\r\n\tpreviewLinks: false,\r\n\r\n\t// Transition style\r\n\ttransition: 'default', // none/fade/slide/convex/concave/zoom\r\n\r\n\t// Transition speed\r\n\ttransitionSpeed: 'default', // default/fast/slow\r\n\r\n\t// Transition style for full page slide backgrounds\r\n\tbackgroundTransition: 'default', // none/fade/slide/convex/concave/zoom\r\n\r\n\t// Number of slides away from the current that are visible\r\n\tviewDistance: 3,\r\n\r\n\t// Parallax background image\r\n\tparallaxBackgroundImage: '', // e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\"\r\n\r\n\t// Parallax background size\r\n\tparallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\"\r\n\r\n\t// Amount to move parallax background (horizontal and vertical) on slide change\r\n\t// Number, e.g. 100\r\n\tparallaxBackgroundHorizontal: '',\r\n\tparallaxBackgroundVertical: ''\r\n\r\n});\r\n```\r\n\r\n\r\nThe configuration can be updated after initialization using the ```configure``` method:\r\n\r\n```javascript\r\n// Turn autoSlide off\r\nReveal.configure({ autoSlide: 0 });\r\n\r\n// Start auto-sliding every 5s\r\nReveal.configure({ autoSlide: 5000 });\r\n```\r\n\r\n\r\n### Dependencies\r\n\r\nReveal.js doesn't _rely_ on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example:\r\n\r\n```javascript\r\nReveal.initialize({\r\n\tdependencies: [\r\n\t\t// Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/\r\n\t\t{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },\r\n\r\n\t\t// Interpret Markdown in <section> elements\r\n\t\t{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\r\n\t\t{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\r\n\r\n\t\t// Syntax highlight for <code> elements\r\n\t\t{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },\r\n\r\n\t\t// Zoom in and out with Alt+click\r\n\t\t{ src: 'plugin/zoom-js/zoom.js', async: true },\r\n\r\n\t\t// Speaker notes\r\n\t\t{ src: 'plugin/notes/notes.js', async: true },\r\n\r\n\t\t// Remote control your reveal.js presentation using a touch device\r\n\t\t{ src: 'plugin/remotes/remotes.js', async: true },\r\n\r\n\t\t// MathJax\r\n\t\t{ src: 'plugin/math/math.js', async: true }\r\n\t]\r\n});\r\n```\r\n\r\nYou can add your own extensions using the same syntax. The following properties are available for each dependency object:\r\n- **src**: Path to the script to load\r\n- **async**: [optional] Flags if the script should load after reveal.js has started, defaults to false\r\n- **callback**: [optional] Function to execute when the script has loaded\r\n- **condition**: [optional] Function which must return true for the script to be loaded\r\n\r\n\r\n### Ready Event\r\n\r\nA 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call `Reveal.isReady()`.\r\n\r\n```javascript\r\nReveal.addEventListener( 'ready', function( event ) {\r\n\t// event.currentSlide, event.indexh, event.indexv\r\n} );\r\n```\r\n\r\n\r\n### Presentation Size\r\n\r\nAll presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport.\r\n\r\nSee below for a list of configuration options related to sizing, including default values:\r\n\r\n```javascript\r\nReveal.initialize({\r\n\r\n\t...\r\n\r\n\t// The \"normal\" size of the presentation, aspect ratio will be preserved\r\n\t// when the presentation is scaled to fit different resolutions. Can be\r\n\t// specified using percentage units.\r\n\twidth: 960,\r\n\theight: 700,\r\n\r\n\t// Factor of the display size that should remain empty around the content\r\n\tmargin: 0.1,\r\n\r\n\t// Bounds for smallest/largest possible scale to apply to content\r\n\tminScale: 0.2,\r\n\tmaxScale: 1.5\r\n\r\n});\r\n```\r\n\r\n\r\n### Auto-sliding\r\n\r\nPresentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides:\r\n\r\n```javascript\r\n// Slide every five seconds\r\nReveal.configure({\r\n  autoSlide: 5000\r\n});\r\n```\r\nWhen this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing »a« on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying ```autoSlideStoppable: false``` in your reveal.js config.\r\n\r\nYou can also override the slide duration for individual slides and fragments by using the ```data-autoslide``` attribute:\r\n\r\n```html\r\n<section data-autoslide=\"2000\">\r\n\t<p>After 2 seconds the first fragment will be shown.</p>\r\n\t<p class=\"fragment\" data-autoslide=\"10000\">After 10 seconds the next fragment will be shown.</p>\r\n\t<p class=\"fragment\">Now, the fragment is displayed for 2 seconds before the next slide is shown.</p>\r\n</section>\r\n```\r\n\r\nWhenever the auto-slide mode is resumed or paused the ```autoslideresumed``` and ```autoslidepaused``` events are fired.\r\n\r\n\r\n### Keyboard Bindings\r\n\r\nIf you're unhappy with any of the default keyboard bindings you can override them using the ```keyboard``` config option:\r\n\r\n```javascript\r\nReveal.configure({\r\n  keyboard: {\r\n    13: 'next', // go to the next slide when the ENTER key is pressed\r\n    27: function() {}, // do something custom when ESC is pressed\r\n    32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding)\r\n  }\r\n});\r\n```\r\n\r\n### Lazy Loading\r\n\r\nWhen working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the `viewDistance` configuration option.\r\n\r\nTo enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible.\r\n\r\n```html\r\n<section>\r\n  <img data-src=\"image.png\">\r\n  <iframe data-src=\"http://hakim.se\"></iframe>\r\n  <video>\r\n    <source data-src=\"video.webm\" type=\"video/webm\" />\r\n    <source data-src=\"video.mp4\" type=\"video/mp4\" />\r\n  </video>\r\n</section>\r\n```\r\n\r\n\r\n### API\r\n\r\nThe ``Reveal`` object exposes a JavaScript API for controlling navigation and reading state:\r\n\r\n```javascript\r\n// Navigation\r\nReveal.slide( indexh, indexv, indexf );\r\nReveal.left();\r\nReveal.right();\r\nReveal.up();\r\nReveal.down();\r\nReveal.prev();\r\nReveal.next();\r\nReveal.prevFragment();\r\nReveal.nextFragment();\r\n\r\n// Toggle presentation states, optionally pass true/false to force on/off\r\nReveal.toggleOverview();\r\nReveal.togglePause();\r\nReveal.toggleAutoSlide();\r\n\r\n// Change a config value at runtime\r\nReveal.configure({ controls: true });\r\n\r\n// Returns the present configuration options\r\nReveal.getConfig();\r\n\r\n// Fetch the current scale of the presentation\r\nReveal.getScale();\r\n\r\n// Retrieves the previous and current slide elements\r\nReveal.getPreviousSlide();\r\nReveal.getCurrentSlide();\r\n\r\nReveal.getIndices(); // { h: 0, v: 0 } }\r\nReveal.getProgress(); // 0-1\r\nReveal.getTotalSlides();\r\n\r\n// State checks\r\nReveal.isFirstSlide();\r\nReveal.isLastSlide();\r\nReveal.isOverview();\r\nReveal.isPaused();\r\nReveal.isAutoSliding();\r\n```\r\n\r\n### Slide Changed Event\r\n\r\nA 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes.\r\n\r\nSome libraries, like MathJax (see [#226](https://github.com/hakimel/reveal.js/issues/226#issuecomment-10261609)), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback.\r\n\r\n```javascript\r\nReveal.addEventListener( 'slidechanged', function( event ) {\r\n\t// event.previousSlide, event.currentSlide, event.indexh, event.indexv\r\n} );\r\n```\r\n\r\n### Presentation State\r\n\r\nThe presentation's current state can be fetched by using the `getState` method. A state object contains all of the information required to put the presentation back as it was when `getState` was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire.\r\n\r\n```javascript\r\nReveal.slide( 1 );\r\n// we're on slide 1\r\n\r\nvar state = Reveal.getState();\r\n\r\nReveal.slide( 3 );\r\n// we're on slide 3\r\n\r\nReveal.setState( state );\r\n// we're back on slide 1\r\n```\r\n\r\n### Slide States\r\n\r\nIf you set ``data-state=\"somestate\"`` on a slide ``<section>``, \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide.\r\n\r\nFurthermore you can also listen to these changes in state via JavaScript:\r\n\r\n```javascript\r\nReveal.addEventListener( 'somestate', function() {\r\n\t// TODO: Sprinkle magic\r\n}, false );\r\n```\r\n\r\n### Slide Backgrounds\r\n\r\nSlides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a ```data-background``` attribute to your ```<section>``` elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples.\r\n\r\n```html\r\n<section data-background=\"#ff0000\">\r\n\t<h2>All CSS color formats are supported, like rgba() or hsl().</h2>\r\n</section>\r\n<section data-background=\"http://example.com/image.png\">\r\n\t<h2>This slide will have a full-size background image.</h2>\r\n</section>\r\n<section data-background=\"http://example.com/image.png\" data-background-size=\"100px\" data-background-repeat=\"repeat\">\r\n\t<h2>This background image will be sized to 100px and repeated.</h2>\r\n</section>\r\n<section data-background-video=\"https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm\" data-background-video-loop>\r\n\t<h2>Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided.</h2>\r\n</section>\r\n<section data-background-iframe=\"https://slides.com\">\r\n\t<h2>Embeds a web page as a background. Note that the page won't be interactive.</h2>\r\n</section>\r\n```\r\n\r\nBackgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing ```backgroundTransition: 'slide'``` to the ```Reveal.initialize()``` call. Alternatively you can set ```data-background-transition``` on any section with a background to override that specific transition.\r\n\r\n\r\n### Parallax Background\r\n\r\nIf you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional).\r\n\r\n```javascript\r\nReveal.initialize({\r\n\r\n\t// Parallax background image\r\n\tparallaxBackgroundImage: '', // e.g. \"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\"\r\n\r\n\t// Parallax background size\r\n\tparallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\" - currently only pixels are supported (don't use % or auto)\r\n\r\n\t// Amount of pixels to move the parallax background per slide step,\r\n\t// a value of 0 disables movement along the given axis\r\n\t// These are optional, if they aren't specified they'll be calculated automatically\r\n\tparallaxBackgroundHorizontal: 200,\r\n\tparallaxBackgroundVertical: 50\r\n\r\n});\r\n```\r\n\r\nMake sure that the background size is much bigger than screen size to allow for some scrolling. [View example](http://lab.hakim.se/reveal-js/?parallaxBackgroundImage=https%3A%2F%2Fs3.amazonaws.com%2Fhakim-static%2Freveal-js%2Freveal-parallax-1.jpg&parallaxBackgroundSize=2100px%20900px).\r\n\r\n\r\n\r\n### Slide Transitions\r\nThe global presentation transition is set using the ```transition``` config value. You can override the global transition for a specific slide by using the ```data-transition``` attribute:\r\n\r\n```html\r\n<section data-transition=\"zoom\">\r\n\t<h2>This slide will override the presentation transition and zoom!</h2>\r\n</section>\r\n\r\n<section data-transition-speed=\"fast\">\r\n\t<h2>Choose from three transition speeds: default, fast or slow!</h2>\r\n</section>\r\n```\r\n\r\nYou can also use different in and out transitions for the same slide:\r\n\r\n```html\r\n<section data-transition=\"slide\">\r\n    The train goes on … \r\n</section>\r\n<section data-transition=\"slide\"> \r\n    and on … \r\n</section>\r\n<section data-transition=\"slide-in fade-out\"> \r\n    and stops.\r\n</section>\r\n<section data-transition=\"fade-in slide-out\"> \r\n    (Passengers entering and leaving)\r\n</section>\r\n<section data-transition=\"slide\">\r\n    And it starts again.\r\n</section>\r\n```\r\n\r\n\r\nNote that this does not work with the page and cube transitions.\r\n\r\n\r\n### Internal links\r\n\r\nIt's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute (```<section id=\"some-slide\">```):\r\n\r\n```html\r\n<a href=\"#/2/2\">Link</a>\r\n<a href=\"#/some-slide\">Link</a>\r\n```\r\n\r\nYou can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an ```enabled``` class when it's a valid navigation route based on the current slide.\r\n\r\n```html\r\n<a href=\"#\" class=\"navigate-left\">\r\n<a href=\"#\" class=\"navigate-right\">\r\n<a href=\"#\" class=\"navigate-up\">\r\n<a href=\"#\" class=\"navigate-down\">\r\n<a href=\"#\" class=\"navigate-prev\"> <!-- Previous vertical or horizontal slide -->\r\n<a href=\"#\" class=\"navigate-next\"> <!-- Next vertical or horizontal slide -->\r\n```\r\n\r\n\r\n### Fragments\r\nFragments are used to highlight individual elements on a slide. Every element with the class ```fragment``` will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments\r\n\r\nThe default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment:\r\n\r\n```html\r\n<section>\r\n\t<p class=\"fragment grow\">grow</p>\r\n\t<p class=\"fragment shrink\">shrink</p>\r\n\t<p class=\"fragment fade-out\">fade-out</p>\r\n\t<p class=\"fragment current-visible\">visible only once</p>\r\n\t<p class=\"fragment highlight-current-blue\">blue only once</p>\r\n\t<p class=\"fragment highlight-red\">highlight-red</p>\r\n\t<p class=\"fragment highlight-green\">highlight-green</p>\r\n\t<p class=\"fragment highlight-blue\">highlight-blue</p>\r\n</section>\r\n```\r\n\r\nMultiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second.\r\n\r\n```html\r\n<section>\r\n\t<span class=\"fragment fade-in\">\r\n\t\t<span class=\"fragment fade-out\">I'll fade in, then out</span>\r\n\t</span>\r\n</section>\r\n```\r\n\r\nThe display order of fragments can be controlled using the ```data-fragment-index``` attribute.\r\n\r\n```html\r\n<section>\r\n\t<p class=\"fragment\" data-fragment-index=\"3\">Appears last</p>\r\n\t<p class=\"fragment\" data-fragment-index=\"1\">Appears first</p>\r\n\t<p class=\"fragment\" data-fragment-index=\"2\">Appears second</p>\r\n</section>\r\n```\r\n\r\n### Fragment events\r\n\r\nWhen a slide fragment is either shown or hidden reveal.js will dispatch an event.\r\n\r\nSome libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback.\r\n\r\n```javascript\r\nReveal.addEventListener( 'fragmentshown', function( event ) {\r\n\t// event.fragment = the fragment DOM element\r\n} );\r\nReveal.addEventListener( 'fragmenthidden', function( event ) {\r\n\t// event.fragment = the fragment DOM element\r\n} );\r\n```\r\n\r\n### Code syntax highlighting\r\n\r\nBy default, Reveal is configured with [highlight.js](http://softwaremaniacs.org/soft/highlight/en/) for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the `data-trim` attribute is present surrounding whitespace is automatically removed.\r\n\r\n```html\r\n<section>\r\n\t<pre><code data-trim>\r\n(def lazy-fib\r\n  (concat\r\n   [0 1]\r\n   ((fn rfib [a b]\r\n        (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1)))\r\n\t</code></pre>\r\n</section>\r\n```\r\n\r\n### Slide number\r\nIf you would like to display the page number of the current slide you can do so using the ```slideNumber``` configuration value.\r\n\r\n```javascript\r\n// Shows the slide number using default formatting\r\nReveal.configure({ slideNumber: true });\r\n\r\n// Slide number formatting can be configured using these variables:\r\n//  h: current slide's horizontal index\r\n//  v: current slide's vertical index\r\n//  c: current slide index (flattened)\r\n//  t: total number of slides (flattened)\r\nReveal.configure({ slideNumber: 'c / t' });\r\n\r\n```\r\n\r\n\r\n### Overview mode\r\n\r\nPress \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides,\r\nas if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks:\r\n\r\n```javascript\r\nReveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } );\r\nReveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } );\r\n\r\n// Toggle the overview mode programmatically\r\nReveal.toggleOverview();\r\n```\r\n\r\n### Fullscreen mode\r\nJust press »F« on your keyboard to show your presentation in fullscreen mode. Press the »ESC« key to exit fullscreen mode.\r\n\r\n\r\n### Embedded media\r\nEmbedded HTML5 `<video>`/`<audio>` and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a `data-ignore` attribute.\r\n\r\nAdd `data-autoplay` to your media element if you want it to automatically start playing when the slide is shown:\r\n\r\n```html\r\n<video data-autoplay src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video>\r\n```\r\n\r\nAdditionally the framework automatically pushes two [post messages](https://developer.mozilla.org/en-US/docs/Web/API/Window.postMessage) to all iframes, ```slide:start``` when the slide containing the iframe is made visible and ```slide:stop``` when it is hidden.\r\n\r\n\r\n### Stretching elements\r\nSometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the ```.stretch``` class to an element as seen below:\r\n\r\n```html\r\n<section>\r\n\t<h2>This video will use up the remaining space on the slide</h2>\r\n    <video class=\"stretch\" src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video>\r\n</section>\r\n```\r\n\r\nLimitations:\r\n- Only direct descendants of a slide section can be stretched\r\n- Only one descendant per slide section can be stretched\r\n\r\n\r\n### postMessage API\r\nThe framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2:\r\n\r\n```javascript\r\n<window>.postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' );\r\n```\r\n\r\nWhen reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window:\r\n\r\n```javascript\r\nwindow.addEventListener( 'message', function( event ) {\r\n\tvar data = JSON.parse( event.data );\r\n\tif( data.namespace === 'reveal' && data.eventName ='slidechanged' ) {\r\n\t\t// Slide changed, see data.state for slide number\r\n\t}\r\n} );\r\n```\r\n\r\nThis cross-window messaging can be toggled on or off using configuration flags.\r\n\r\n```javascript\r\nReveal.initialize({\r\n\t...,\r\n\r\n\t// Exposes the reveal.js API through window.postMessage\r\n\tpostMessage: true,\r\n\r\n\t// Dispatches all reveal.js events to the parent window through postMessage\r\n\tpostMessageEvents: false\r\n});\r\n```\r\n\r\n\r\n## PDF Export\r\n\r\nPresentations can be exported to PDF via a special print stylesheet. This feature requires that you use [Google Chrome](http://google.com/chrome) or [Chromium](https://www.chromium.org/Home).\r\nHere's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.\r\n\r\n1. Open your presentation with `print-pdf` included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ([css/print/pdf.css](https://github.com/hakimel/reveal.js/blob/master/css/print/pdf.css)). You can test this with [lab.hakim.se/reveal-js?print-pdf](http://lab.hakim.se/reveal-js?print-pdf).\r\n2. Open the in-browser print dialog (CMD+P).\r\n3. Change the **Destination** setting to **Save as PDF**.\r\n4. Change the **Layout** to **Landscape**.\r\n5. Change the **Margins** to **None**.\r\n6. Click **Save**.\r\n\r\n![Chrome Print Settings](https://s3.amazonaws.com/hakim-static/reveal-js/pdf-print-settings.png)\r\n\r\nAlternatively you can use the [decktape](https://github.com/astefanutti/decktape) project.\r\n\r\n## Theming\r\n\r\nThe framework comes with a few different themes included:\r\n\r\n- black: Black background, white text, blue links (default theme)\r\n- white: White background, black text, blue links\r\n- league: Gray background, white text, blue links (default theme for reveal.js < 3.0.0)\r\n- beige: Beige background, dark text, brown links\r\n- sky: Blue background, thin dark text, blue links\r\n- night: Black background, thick white text, orange links\r\n- serif: Cappuccino background, gray text, brown links\r\n- simple: White background, black text, blue links\r\n- solarized: Cream-colored background, dark green text, blue links\r\n\r\nEach theme is available as a separate stylesheet. To change theme you will need to replace **black** below with your desired theme name in index.html:\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"css/theme/black.css\" id=\"theme\">\r\n```\r\n\r\nIf you want to add a theme of your own see the instructions here: [/css/theme/README.md](https://github.com/hakimel/reveal.js/blob/master/css/theme/README.md).\r\n\r\n\r\n## Speaker Notes\r\n\r\nreveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window.\r\n\r\nNotes are defined by appending an ```<aside>``` element to a slide as seen below. You can add the ```data-markdown``` attribute to the aside element if you prefer writing notes using Markdown.\r\n\r\nWhen used locally, this feature requires that reveal.js [runs from a local web server](#full-setup).\r\n\r\n```html\r\n<section>\r\n\t<h2>Some Slide</h2>\r\n\r\n\t<aside class=\"notes\">\r\n\t\tOh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard).\r\n\t</aside>\r\n</section>\r\n```\r\n\r\nIf you're using the external Markdown plugin, you can add notes with the help of a special delimiter:\r\n\r\n```html\r\n<section data-markdown=\"example.md\" data-separator=\"^\\n\\n\\n\" data-separator-vertical=\"^\\n\\n\" data-separator-notes=\"^Note:\"></section>\r\n\r\n# Title\r\n## Sub-title\r\n\r\nHere is some content...\r\n\r\nNote:\r\nThis will only display in the notes window.\r\n```\r\n\r\n## Server Side Speaker Notes\r\n\r\nIn some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies:\r\n\r\n```javascript\r\nReveal.initialize({\r\n\t...\r\n\r\n\tdependencies: [\r\n\t\t{ src: 'socket.io/socket.io.js', async: true },\r\n\t\t{ src: 'plugin/notes-server/client.js', async: true }\r\n\t]\r\n});\r\n```\r\n\r\nThen:\r\n\r\n1. Install [Node.js](http://nodejs.org/)\r\n2. Run ```npm install```\r\n3. Run ```node plugin/notes-server```\r\n\r\n\r\n## Multiplexing\r\n\r\nThe multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at [http://revealjs.jit.su/](http://revealjs.jit.su).\r\n\r\nThe multiplex plugin needs the following 3 things to operate:\r\n\r\n1. Master presentation that has control\r\n2. Client presentations that follow the master\r\n3. Socket.io server to broadcast events from the master to the clients\r\n\r\nMore details:\r\n\r\n#### Master presentation\r\nServed from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: \r\n\r\n1. ```npm install node-static```\r\n2. ```static```\r\n\r\nIf you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute ```node plugin/notes-server``` in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server.\r\n\r\nYou can then access your master presentation at ```http://localhost:1947```\r\n\r\nExample configuration:\r\n```javascript\r\nReveal.initialize({\r\n\t// other options...\r\n\r\n\tmultiplex: {\r\n\t\t// Example values. To generate your own, see the socket.io server instructions.\r\n\t\tsecret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation\r\n\t\tid: '1ea875674b17ca76', // Obtained from socket.io server\r\n\t\turl: 'revealjs.jit.su:80' // Location of socket.io server\r\n\t},\r\n\r\n\t// Don't forget to add the dependencies\r\n\tdependencies: [\r\n\t\t{ src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.16/socket.io.min.js', async: true },\r\n\t\t{ src: 'plugin/multiplex/master.js', async: true },\r\n\r\n\t\t// and if you want speaker notes\r\n\t\t{ src: 'plugin/notes-server/client.js', async: true }\r\n\r\n\t\t// other dependencies...\r\n\t]\r\n});\r\n```\r\n\r\n#### Client presentation\r\nServed from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via ```http://example.com/path/to/presentation/client/index.html```, with the configuration below causing them to connect to the socket.io server as clients.\r\n\r\nExample configuration:\r\n```javascript\r\nReveal.initialize({\r\n\t// other options...\r\n\r\n\tmultiplex: {\r\n\t\t// Example values. To generate your own, see the socket.io server instructions.\r\n\t\tsecret: null, // null so the clients do not have control of the master presentation\r\n\t\tid: '1ea875674b17ca76', // id, obtained from socket.io server\r\n\t\turl: 'revealjs.jit.su:80' // Location of socket.io server\r\n\t},\r\n\r\n\t// Don't forget to add the dependencies\r\n\tdependencies: [\r\n\t\t{ src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.16/socket.io.min.js', async: true },\r\n\t\t{ src: 'plugin/multiplex/client.js', async: true }\r\n\r\n\t\t// other dependencies...\r\n\t]\r\n});\r\n```\r\n\r\n#### Socket.io server\r\nServer that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands:\r\n\r\n1. ```npm install```\r\n2. ```node plugin/multiplex```\r\n\r\nOr you use the socket.io server at [http://revealjs.jit.su](http://revealjs.jit.su).\r\n\r\nYou'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit ```http://example.com/token```, where ```http://example.com``` is the location of your socket.io server. Or if you're going to use the socket.io server at [http://revealjs.jit.su](http://revealjs.jit.su), visit [http://revealjs.jit.su/token](http://revealjs.jit.su/token).\r\n\r\nYou are very welcome to point your presentations at the Socket.io server running at [http://revealjs.jit.su](http://revealjs.jit.su), but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc.\r\n\r\n##### socket.io server as file static server\r\n\r\nThe socket.io server can play the role of static file server for your client presentation, as in the example at [http://revealjs.jit.su](http://revealjs.jit.su). (Open [http://revealjs.jit.su](http://revealjs.jit.su) in two browsers. Navigate through the slides on one, and the other will update to match.) \r\n\r\nExample configuration:\r\n```javascript\r\nReveal.initialize({\r\n\t// other options...\r\n\r\n\tmultiplex: {\r\n\t\t// Example values. To generate your own, see the socket.io server instructions.\r\n\t\tsecret: null, // null so the clients do not have control of the master presentation\r\n\t\tid: '1ea875674b17ca76', // id, obtained from socket.io server\r\n\t\turl: 'example.com:80' // Location of your socket.io server\r\n\t},\r\n\r\n\t// Don't forget to add the dependencies\r\n\tdependencies: [\r\n\t\t{ src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.16/socket.io.min.js', async: true },\r\n\t\t{ src: 'plugin/multiplex/client.js', async: true }\r\n\r\n\t\t// other dependencies...\r\n\t]\r\n```\r\n\r\nIt can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open [http://revealjs.jit.su](http://revealjs.jit.su) in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;)\r\n\r\nExample configuration:\r\n```javascript\r\nReveal.initialize({\r\n\t// other options...\r\n\r\n\tmultiplex: {\r\n\t\t// Example values. To generate your own, see the socket.io server instructions.\r\n\t\tsecret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation\r\n\t\tid: '1ea875674b17ca76', // Obtained from socket.io server\r\n\t\turl: 'example.com:80' // Location of your socket.io server\r\n\t},\r\n\r\n\t// Don't forget to add the dependencies\r\n\tdependencies: [\r\n\t\t{ src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.16/socket.io.min.js', async: true },\r\n\t\t{ src: 'plugin/multiplex/master.js', async: true },\r\n\t\t{ src: 'plugin/multiplex/client.js', async: true }\r\n\r\n\t\t// other dependencies...\r\n\t]\r\n});\r\n```\r\n\r\n## Leap Motion\r\nThe Leap Motion plugin lets you utilize your [Leap Motion](https://www.leapmotion.com/) device to control basic navigation of your presentation. The gestures currently supported are:\r\n\r\n##### 1 to 2 fingers\r\nPointer &mdash; Point to anything on screen. Move your finger past the device to expand the pointer.\r\n\r\n##### 1 hand + 3 or more fingers (left/right/up/down)\r\nNavigate through your slides. See config options to invert movements.\r\n\r\n##### 2 hands upwards\r\nToggle the overview mode. Do it a second time to exit the overview.\r\n\r\n#### Config Options\r\nYou can edit the following options:\r\n\r\n| Property          | Default           | Description\r\n| ----------------- |:-----------------:| :-------------\r\n| autoCenter        | true              | Center the pointer based on where you put your finger into the leap motions detection field.\r\n| gestureDelay      | 500               | How long to delay between gestures in milliseconds.\r\n| naturalSwipe      | true              | Swipe as though you were touching a touch screen. Set to false to invert.\r\n| pointerColor      | #00aaff           | The color of the pointer.\r\n| pointerOpacity    | 0.7               | The opacity of the pointer.\r\n| pointerSize       | 15                | The minimum height and width of the pointer.\r\n| pointerTolerance  | 120               | Bigger = slower pointer.\r\n\r\n\r\nExample configuration:\r\n```js\r\nReveal.initialize({\r\n\r\n\t// other options...\r\n\r\n\tleap: {\r\n\t\tnaturalSwipe   : false,    // Invert swipe gestures\r\n\t\tpointerOpacity : 0.5,      // Set pointer opacity to 0.5\r\n\t\tpointerColor   : '#d80000' // Red pointer\r\n\t},\r\n\r\n\tdependencies: [\r\n\t\t{ src: 'plugin/leap/leap.js', async: true }\r\n\t]\r\n\r\n});\r\n```\r\n\r\n## MathJax\r\n\r\nIf you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the [MathJax](http://www.mathjax.org/) library. To use it you'll need to include it as a reveal.js dependency, [find our more about dependencies here](#dependencies).\r\n\r\nThe plugin defaults to using [LaTeX](http://en.wikipedia.org/wiki/LaTeX) but that can be adjusted through the ```math``` configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the ```mathjax``` configuration value. \r\n\r\nBelow is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the ```math``` config object at all.\r\n\r\n```js\r\nReveal.initialize({\r\n\r\n\t// other options ...\r\n\r\n\tmath: {\r\n\t\tmathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js',\r\n\t\tconfig: 'TeX-AMS_HTML-full'  // See http://docs.mathjax.org/en/latest/config-files.html\r\n\t},\r\n\t\r\n\tdependencies: [\r\n\t\t{ src: 'plugin/math/math.js', async: true }\r\n\t]\r\n\r\n});\r\n```\r\n\r\nRead MathJax's documentation if you need [HTTPS delivery](http://docs.mathjax.org/en/latest/start.html#secure-access-to-the-cdn) or serving of [specific versions](http://docs.mathjax.org/en/latest/configuration.html#loading-mathjax-from-the-cdn) for stability.\r\n\r\n\r\n## Installation\r\n\r\nThe **basic setup** is for authoring presentations only. The **full setup** gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.\r\n\r\n### Basic setup\r\n\r\nThe core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser.\r\n\r\n1. Download the latest version of reveal.js from <https://github.com/hakimel/reveal.js/releases>\r\n\r\n2. Unzip and replace the example contents in index.html with your own\r\n\r\n3. Open index.html in a browser to view it\r\n\r\n\r\n### Full setup\r\n\r\nSome reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code.\r\n\r\n1. Install [Node.js](http://nodejs.org/)\r\n\r\n2. Install [Grunt](http://gruntjs.com/getting-started#installing-the-cli)\r\n\r\n4. Clone the reveal.js repository\r\n   ```sh\r\n   $ git clone https://github.com/hakimel/reveal.js.git\r\n   ```\r\n\r\n5. Navigate to the reveal.js folder\r\n   ```sh\r\n   $ cd reveal.js\r\n   ```\r\n\r\n6. Install dependencies\r\n   ```sh\r\n   $ npm install\r\n   ```\r\n\r\n7. Serve the presentation and monitor source files for changes\r\n   ```sh\r\n   $ grunt serve\r\n   ```\r\n\r\n8. Open <http://localhost:8000> to view your presentation\r\n\r\n   You can change the port by using `grunt serve --port 8001`.\r\n\r\n\r\n### Folder Structure\r\n- **css/** Core styles without which the project does not function\r\n- **js/** Like above but for JavaScript\r\n- **plugin/** Components that have been developed as extensions to reveal.js\r\n- **lib/** All other third party assets (JavaScript, CSS, fonts)\r\n\r\n\r\n## License\r\n\r\nMIT licensed\r\n\r\nCopyright (C) 2015 Hakim El Hattab, http://hakim.se\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hakimel/reveal.js/issues"
  },
  "_id": "reveal.js@3.1.0",
  "_shasum": "2ab9fdd6efa04d63f1facd60676d9cd8d2131b18",
  "_from": "git://github.com/hakimel/reveal.js.git",
  "_resolved": "git://github.com/hakimel/reveal.js.git#0c971b06e4f14a6093c8dcb5feb6b704f3906b99"
}
